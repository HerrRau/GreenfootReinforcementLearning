#BlueJ class context
comment0.target=NeuronalesNetz
comment0.text=\r\n\ @author\ Sto\ \r\n
comment1.params=eingabeKnoten\ versteckteKnoten\ ausgabeKnoten\ lernRate
comment1.target=NeuronalesNetz(int,\ int,\ int,\ double)
comment1.text=\r\n\ Constructor\ for\ objects\ of\ class\ NeuronalesNetz\r\n
comment10.params=r\ fehler\ ausgabe
comment10.target=double[]\ korrekturVektor(double,\ double[],\ double[])
comment10.text=\ Backpropagating-Vektor\ bestimmen\r\n\ @param\ r\ Lernrate\ f\u00FCr\ das\ Netz\r\n\ @param\ fehler\ Fehlervektor\r\n\ @param\ ausgabe\ alter\ Ausgabevektor\r\n
comment11.params=eingabevektor
comment11.target=double[]\ eingabeBearbeiten(double[])
comment11.text=\r\n\ Abfrage\ des\ Netzes\r\n\ @param\ eingabevektor\r\n\ @return\ ausgabevektor\r\n
comment12.params=x
comment12.target=double\ aktivierungsfunktion(double)
comment12.text=\r\n\ Aktivierungsfunktion\r\n\ @param\ x\ double-Argument\r\n\ @return\ y\ \r\n
comment13.params=x
comment13.target=double\ sigmoid(double)
comment14.params=d
comment14.target=double\ cutoff(double)
comment15.params=d
comment15.target=double\ relu(double)
comment16.params=d
comment16.target=double\ leakyRelu(double)
comment17.params=vektor
comment17.target=double[]\ fktVonVektor(double[])
comment17.text=\ \r\n\ Aktivierungsfunktion\ auf\ Ausgabe-Vektor\ einer\ Schicht\r\n\ anwenden.\r\n\ @param\ vektor\r\n\ @return\ ergvektor\r\n
comment18.params=v1\ v2
comment18.target=double[]\ vektorPlusVektor(double[],\ double[])
comment18.text=\r\n\ VektorPlusVektor\r\n\ @param\ v1\ Erster\ Vektor\r\n\ @param\ v2\ Zweiter\ Vektor\r\n\ @return\ sum\ Summenvektor\r\n
comment19.params=z\ v
comment19.target=double[]\ ZahlMalVektor(double,\ double[])
comment19.text=\r\n\ ZahlMalVektor\r\n\ @param\ v\ Vektor\r\n\ @param\ z\ double-Zahl\r\n\ @return\ erg\ Ergebnisvektor\r\n
comment2.params=select
comment2.target=void\ setzeAktivierungsfunktion(int)
comment20.params=m\ v
comment20.target=double[]\ matrixMalVektor(double[][],\ double[])
comment20.text=\r\n\ MatrixMalVektor\r\n\ @param\ m\ Matrix\r\n\ @param\ v\ Vektor\r\n\ @return\ ergvektor\r\n
comment21.params=m
comment21.target=double[][]\ transponieren(double[][])
comment21.text=\r\n\ Transponierte\ Matrix\r\n\ @param\ m\ Matrix\r\n\ @return\ mt\ transponierte\ Matrix\r\n
comment22.params=m1\ m2
comment22.target=double[][]\ matrizenMult(double[][],\ double[][])
comment22.text=\r\n\ Matrix\ Multiplikation\r\n\ \r\n\ @param\ m1\ Matrix\ 1\r\n\ @param\ m2\ Matrix\ 2\r\n\ @return\ ergebnismatrix\r\n
comment23.params=
comment23.target=int\ gibAnzahlEingang()
comment24.params=
comment24.target=int\ gibAnzahlHidden()
comment25.params=
comment25.target=int\ gibAnzahlAusgang()
comment26.params=
comment26.target=double\ gibLernrate()
comment27.params=neuerWert
comment27.target=void\ setzeLernrate(double)
comment28.params=
comment28.target=double[][][]\ gibGewichte()
comment29.params=gewichte
comment29.target=boolean\ setzeGewichte(double[][][])
comment3.params=select
comment3.target=void\ initialisiere(int)
comment30.params=eingabevektor
comment30.target=double[]\ werteAus(double[])
comment31.params=belegung
comment31.target=void\ ausgabeGewichte(double[][][])
comment32.params=s
comment32.target=void\ println(java.lang.String)
comment33.params=
comment33.target=void\ println()
comment34.params=s
comment34.target=void\ print(java.lang.String)
comment35.params=d
comment35.target=void\ print(double)
comment4.params=
comment4.target=void\ belegeGewichteZufaellig()
comment5.params=von\ bis
comment5.target=void\ belegeGewichteZufaelligVonBis(double,\ double)
comment6.params=d1\ d2
comment6.target=void\ belegeGewichteZufaelligMitEinemVon(double,\ double)
comment7.params=d
comment7.target=void\ belegeGewichteMit(double)
comment8.params=
comment8.target=void\ belegeGewichteHeUniform()
comment9.params=eingabevektor\ zielvektor
comment9.target=void\ trainiere(double[],\ double[])
comment9.text=\r\n\ Trainieren\ des\ Netzes\r\n\ @param\ eingabevektor\r\n\ @param\ zielvektor\r\n
numComments=36
