#BlueJ class context
comment0.target=SnakeGameKI
comment1.params=
comment1.target=SnakeGameKI()
comment10.params=move
comment10.target=java.lang.String\ getNameForMove(int)
comment11.params=player\ move
comment11.target=void\ makeMove(int,\ int)
comment12.params=
comment12.target=java.lang.String\ getState()
comment13.params=selector
comment13.target=void\ setStateType(int)
comment13.text=\r\n\ Selects\ which\ method\ is\ used\ to\ get\ the\ game\ state\ for\ the\ player.\r\n\ There\ are\ various\ options,\ e.g.\ 0\ means\ to\ check\ whether\ N,\ E,\ S,\ W\ is\ free\r\n\ @param\ selector\ Sets\ the\ type\ of\ method\ of\ getting\ the\ state\ \r\n
comment14.params=playerID
comment14.target=java.lang.String\ getState(int)
comment15.params=playerID
comment15.target=java.lang.String\ getStateSimple(int)
comment16.params=playerID
comment16.target=java.lang.String\ getStateSimplePlusCoordinates(int)
comment17.params=playerID
comment17.target=java.lang.String\ getStateWithDistances(int)
comment18.params=playerID
comment18.target=java.lang.String\ getStateWithDistancesMax(int)
comment19.params=playerID
comment19.target=java.lang.String\ getStateSurroundings(int)
comment2.params=
comment2.target=void\ setup()
comment2.text=\r\n\ Hier\ koennen\ Spielparameter\ festgelegt\ werden,\ insbesondere\ die\ \r\n\ teilnehmenden\ Schlangen\ (KI\ oder\ nicht)\ und\ die\ teilnehmenden\ Player\ (Agenten).\r\n\ Au\u00DFerdem\ muss\ die\ ActOrder\ der\ Greenfoot-Objekte\ festgelegt\ werden,\ so\ dass\ \r\n\ Objekte\ der\ Klasse\ AnzeigeNextMoves\ *nach*\ allen\ Schlangen\ aufgerufen\ werden,\r\n\ damit\ showNextMoves\ moeglich\ ist.\r\n\ Wird\ vom\ Konstruktor\ der\ Oberklasse\ aufgerufen.\r\n
comment20.params=
comment20.target=int\ getWinner()
comment20.text=\r\n\ Wird\ nach\ jedem\ Zug\ jedes\ Teilnehmenden\ aufgerufen,\ also\ oft\ mehrfach\!\r\n
comment21.params=id
comment21.target=double\ getRewardForPlayer(int)
comment3.params=b
comment3.target=void\ setRestartAllSnakesUponWin(boolean)
comment3.text=\r\n\ Entscheidet,\ ob\ bei\ der\ Niederlage\ einer\ Schlange\ alle\ anderen\ Schlangen\ vorne\ beginnen\ sollen.\r\n\ Wenn\ nein,\ fuehrt\ das\ zu\ laengeren\ Lern-\ und\ Spielzeiten\ fuer\ alle\ anderen\ Schlangen,\ dafuer\ \r\n\ muessen\ die\ neueren\ Schlangen\ bereits\ gegen\ laengere\ und\ etabliertere\ Schlangen\ spielen,\ was\ \r\n\ den\ Wettbewerb\ \ verzerren\ kann.\r\n\ @param\ b\ Der\ neue\ Wert\ \r\n
comment4.params=s
comment4.target=void\ verliereSpiel(SnakeHead)
comment4.text=\r\n\ Entscheidet,\ was\ geschieht,\ wenn\ eine\ Schlange\ meldet,\ dass\ sie\ verloren\ hat\:\ es\ starten\ entweder\r\n\ alle\ Schlangen\ neu,\ oder\ nur\ die\ Verliererschlange.\ Alle\ neu\ startenden\ Schlangen\ werden\r\n\ respawned.\ Ihre\ Koerperteile\ verschwinden\ entweder\ sofort\ oder\ weiterhin\ nach\ und\ nach.\r\n\ @param\ The\ snake\ in\ question.\r\n
comment5.params=s
comment5.target=void\ respawn(SnakeHead)
comment5.text=\r\n\ Die\ Schlange\ wird\ auf\ Laenge\ 10\ gesetzt\ und\ startet\ an\ einem\ neuen\ zufaelligen\ Ort.\r\n\ @param\ s\ The\ snake\ in\ question.\ \r\n
comment6.params=id\ name
comment6.target=void\ setName(int,\ java.lang.String)
comment7.params=playerNumber
comment7.target=void\ save(int)
comment7.text=\r\n\ Speichert\ das\ Neuronale\ Netz\ des\ gewaehlten\ Spielers,\ sofern\ der\ ein\ NeuralAgent\ ist.\r\n\ \r\n
comment8.params=playerNumber\ filename
comment8.target=void\ load(int,\ java.lang.String)
comment9.params=
comment9.target=int[]\ getLegalMoves()
numComments=22
